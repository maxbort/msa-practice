Spring Cloud Config Server


==============================
<1> Spring Cloud Dependency

<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-config-server</artifactId>
</dependency>






==============================
<2> Config Server Annotation

@SpringBootApplication
@EnableConfigServer
public class ServiceConfigServer {
	public static void main(String[] args) {
		SpringApplication.run(ServiceConfigServer.class, args);
	}
}




==============================
<3> Configuration
0. profile

   native, git


1. Tomcat Server

server:
   port: 6666


2. file-system based(native)

spring:
  profiles:
    active: native
  cloud:
     config:
       server:
           native:
              searchLocations: file:///Users/kickscar/DoWork/STS-Workspace/msa-practices-config-repo/service-emaillist


3. git based

spring:
   cloud:
      config:
         server:
            encrypt.enabled: true
            git:
               uri: https://github.com/kickscar/msa-practices-config-repo
               searchPaths: service-emaillist


4. Encrypt(암호화)

1. keystore 생성

$ keytool -genkeypair -keyalg RSA -alias selfsigned -keystore keystore.jks -storepass password -validity 10000


2. classpath에 keystore 파일(keystore.jks) 등록

src/main/resources
  |  
  |- keystore.jks
  |
	

3. Configuration(application.yml) 다음 섹션 추가

encrypt:
  key-store:
    alias: {alias}
    location: classpath:keystore.jks
    password: {storepass}


4. 값 암호화 하기

curl {service-config-server}/encrypt -d "webdb"

curl http://localhost:7777/encrypt -d "webdb"

AQBDt4Lf7HWnteDvl0Upn54iRfxlxExoSTcTfPnbzF49BH6nC4XkvueXbbpMuWCl4xFaaAM3iFHbO5UQGHDicHbvVCR1C2C64E5p/ezza2ZkysjHwRa6IPCwPNgjR0+OeJnYsb/9WufHkYOBFT3ntRGNQAsgqRaF/btrXMEORTc4YsHI9a0gBaCN3o5ZdG/DOT8fzhDGKP4N+ewtAz5H2ZA9TIwz8oiTqe5frgnZJmXOkwKxm3YFyF6WW1COEgaZaKaSymQTN+/1CN5oAfdVJEb17rQQ/4S3tKFPkDWU6fFg5NOOhXnCxP0j0BhxuvGbMCBjNrTH6kYl+Zh+C8GSG1NTaIiXh2KidotUqTn/YSDv9OoMpUL2XubaupYPjzf20UQ=


AQC3QkSYiQPShNYRPR7Yqg8DbGvEo2jC+VEf8XL1naBtSvw4YyC5n7JPCaKgqQMgZE9ksm59myUAt5WWtWYENqkQH+J3LjiHurLQXTmOGML58f+Tq6Q=

5. 설정에 추가
   datasource:
      driver-class-name: org.mariadb.jdbc.Driver
      url: jdbc:mysql://{DBServer}/webdb?characterEncoding=utf8
      username: webdb
      password: '{cipher}AQC3QkSYiQPShNYRPR7Yqg8DbGvEo2jC+VEf8XL1naBtSvw4YyC5n7JPCaKgqQMgZE9ksm59myUAt5WWtWYENqkQH+J3LjiHurLQXTmOGML58f+Tq6Q='   

6. 확인: ervice Configuration Endpoits

1) service-emaillist
   - default
     http://{service-config-server}/service-emaillist/default

   - development
     http://{service-config-server}/service-emaillist/development	

   - production
     http://{service-config-server}/service-emaillist/production


2) service-guestbook
   - default
     http://{service-config-server}/service-guestbook/default
	
   - development
     http://{service-config-server}/service-guestbook/development	

   - production
     http://{service-config-server}/service-guestbook/production


3) service-gallery
   - default
     http://{service-config-server}/service-gallery/default
	
   - development
     http://{service-config-server}/service-gallery/development	

   - production
     http://{service-config-server}/service-gallery/production


4) service-storage
   - default
     http://{service-config-server}/service-storage/default
	
   - development
     http://{service-config-server}/service-storage/development	

   - production
     http://{service-config-server}/service-storage/production

5) service-gateway-server
   - default
     http://{service-config-server}/service-gateway-server/default

   - development
     http://{service-config-server}/service-gateway-server/development

   - production
     http://{service-config-server}/service-gateway-server/production






==============================
<4> Config Clients


1. Spring Cloud Dependency

<!-- Spring Cloud Config Client -->
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-config</artifactId>
</dependency>



2. application.yml

---
# configuration: common(default)
spring:
   cloud:
      config:
         enabled: true
         uri: http://localhost:7777


---
# configuration: development
spring:
   config:
      activate:
         on-profile: development
      import: optional:configserver:http://localhost:7777
    
                            
---
# configuration: production
spring:
   config:
      activate:
         on-profile: production
      import: optional:configserver:http://192.168.66.4:7777







	